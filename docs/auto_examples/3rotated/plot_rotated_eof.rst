
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/3rotated/plot_rotated_eof.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_3rotated_plot_rotated_eof.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_3rotated_plot_rotated_eof.py:


Rotated EOF analysis
========================

EOF analysis is often used in climate science to interpret the obtained
eigenvectors (EOFs) as patterns of climatic variability. Given the mathematical
nature of EOF analysis which leads to orthogonal EOFs, this interpretation
is questionable for all but the first EOF. Rotated EOF anaylsis helps to
alleviate the orthogonal constraint of the EOFs by applying an additional
rotation to the (loaded) EOFs by means of a optimization criteria (Varimax,
Promax). Varimax (orthogonal) and Promax (oblique) rotation have the additional
side effect of creating "sparse" solutions, i.e. turning the otherwise dense
EOFs into a more "interpretable" solutions by reducing the number of variables
contributing to an EOF. As such, rotation acts as a kind of regularization of
the EOF solution, with the ``power`` parameter defining its strength (the
higher, the more sparse the EOFs become). In case of small regularization, i.e.
``power=1``, the Promax rotation reduces to a Varimax rotation.

Here we compare the first three modes of EOF analysis (1) without
regularization, (2) with Varimax rotation and (3) with Promax rotation.

Load packages and data:

.. GENERATED FROM PYTHON SOURCE LINES 24-37

.. code-block:: default

    import xarray as xr
    import matplotlib.pyplot as plt
    import seaborn as sns
    from matplotlib.gridspec import GridSpec
    from cartopy.crs import Orthographic, PlateCarree

    from xeofs.xarray import EOF, Rotator


    sns.set_context('paper')

    t2m = xr.tutorial.load_dataset('air_temperature')['air']








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Perform the actual analysis

.. GENERATED FROM PYTHON SOURCE LINES 39-61

.. code-block:: default


    eofs = []
    pcs = []
    # (1) Standard EOF without regularization
    model = EOF(t2m, dim=['time'], weights='coslat')
    model.solve()
    eofs.append(model.eofs())
    pcs.append(model.pcs())
    # (2) Varimax-rotated EOF analysis
    model_var = EOF(t2m, dim=['time'], weights='coslat')
    model_var.solve()
    rot_var = Rotator(model, n_rot=50, power=1)
    eofs.append(rot_var.eofs())
    pcs.append(rot_var.pcs())
    # (3) Promax-rotated EOF analysis
    model_pro = EOF(t2m, dim=['time'], weights='coslat')
    model_pro.solve()
    rot_pro = Rotator(model, n_rot=50, power=2)
    eofs.append(rot_pro.eofs())
    pcs.append(rot_pro.pcs())









.. GENERATED FROM PYTHON SOURCE LINES 62-67

Create figure showing the first 6 modes for all 3 cases. While the first mode
is very similar in all three cases the subsequent modes of the standard
solution exhibit dipole and tripole-like patterns. Under Varimax and Promax
rotation, these structures completely disappear suggesting that these patterns
were mere artifacts due to the orthogonality.

.. GENERATED FROM PYTHON SOURCE LINES 67-100

.. code-block:: default


    proj = Orthographic(central_latitude=30, central_longitude=-80)
    kwargs = {
        'cmap' : 'RdBu', 'transform': PlateCarree(), 'vmin': -.1, 'vmax': +.1,
        'add_colorbar': False

    }
    titles = [
        '(1) Covariances', '(2) Covariances + coslat',
        '(3) Correlation'
    ]
    fig = plt.figure(figsize=(15, 5))
    gs = GridSpec(3, 6)
    ax_std = [fig.add_subplot(gs[0, i], projection=proj) for i in range(6)]
    ax_var = [fig.add_subplot(gs[1, i], projection=proj) for i in range(6)]
    ax_pro = [fig.add_subplot(gs[2, i], projection=proj) for i in range(6)]

    for i, (a0, a1, a2) in enumerate(zip(ax_std, ax_var, ax_pro)):
        mode = i + 1
        a0.coastlines(color='.5')
        a1.coastlines(color='.5')
        a2.coastlines(color='.5')
        eofs[0].sel(mode=mode).plot(ax=a0, **kwargs)
        eofs[1].sel(mode=mode).plot(ax=a1, **kwargs)
        eofs[2].sel(mode=mode).plot(ax=a2, **kwargs)

    title_kwargs = dict(rotation=90, va='center', weight='bold')
    ax_std[0].text(-.1, .5, 'Standard', transform=ax_std[0].transAxes, **title_kwargs)
    ax_var[0].text(-.1, .5, 'Varimax', transform=ax_var[0].transAxes, **title_kwargs)
    ax_pro[0].text(-.1, .5, 'Promax', transform=ax_pro[0].transAxes, **title_kwargs)

    plt.tight_layout()
    plt.savefig('rotated_eof.jpg', dpi=200)



.. image-sg:: /auto_examples/3rotated/images/sphx_glr_plot_rotated_eof_001.png
   :alt: mode = 1, mode = 2, mode = 3, mode = 4, mode = 5, mode = 6, mode = 1, mode = 2, mode = 3, mode = 4, mode = 5, mode = 6, mode = 1, mode = 2, mode = 3, mode = 4, mode = 5, mode = 6
   :srcset: /auto_examples/3rotated/images/sphx_glr_plot_rotated_eof_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.872 seconds)


.. _sphx_glr_download_auto_examples_3rotated_plot_rotated_eof.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_rotated_eof.py <plot_rotated_eof.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_rotated_eof.ipynb <plot_rotated_eof.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
