
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/3validation/plot_bootstrap.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_3validation_plot_bootstrap.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_3validation_plot_bootstrap.py:


Significance testing of EOF analysis via bootstrap
===================================================

Test the significance of individual modes and obtain confidence intervals
for both EOFs and PCs.

.. GENERATED FROM PYTHON SOURCE LINES 8-20

.. code-block:: default



    # Load packages and data:
    import numpy as np
    import xarray as xr
    import matplotlib.pyplot as plt
    from matplotlib.gridspec import GridSpec
    from cartopy.crs import Orthographic, PlateCarree

    from xeofs.models import EOF
    from xeofs.validation import EOFBootstrapper








.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: default


    t2m = xr.tutorial.load_dataset('air_temperature')['air']








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Perform EOF analysis

.. GENERATED FROM PYTHON SOURCE LINES 26-34

.. code-block:: default


    model = EOF(n_modes=5, standardize=False, dim='time')
    model.fit(t2m, dim='time')
    expvar = model.explained_variance_ratio()
    components = model.components()
    scores = model.scores()









.. GENERATED FROM PYTHON SOURCE LINES 35-39

Perform bootstrapping of the model to identy the number of significant modes.
We perform 50 bootstraps.
Note - if computationallly feasible - you typically want to choose higher
numbers of bootstraps e.g. 1000.

.. GENERATED FROM PYTHON SOURCE LINES 39-54

.. code-block:: default


    n_boot = 50

    bs = EOFBootstrapper(n_bootstraps=n_boot)
    bs.bootstrap(model)
    bs_expvar = bs.explained_variance()
    ci_expvar = bs_expvar.quantile([0.025, 0.975], 'n')  # 95% confidence intervals

    q025 = ci_expvar.sel(quantile=0.025)
    q975 = ci_expvar.sel(quantile=0.975)

    is_significant = q025 - q975.shift({'mode': -1}) > 0
    n_significant_modes = is_significant.where(is_significant==True).cumsum(skipna=False).max().fillna(0)
    print('{:} modes are significant at alpha=0.05'.format(n_significant_modes.values))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/50 [00:00<?, ?it/s]      2%|2         | 1/50 [00:00<00:31,  1.57it/s]      4%|4         | 2/50 [00:01<00:26,  1.81it/s]      6%|6         | 3/50 [00:01<00:27,  1.73it/s]      8%|8         | 4/50 [00:02<00:23,  1.96it/s]     10%|#         | 5/50 [00:02<00:20,  2.22it/s]     12%|#2        | 6/50 [00:02<00:19,  2.27it/s]     14%|#4        | 7/50 [00:03<00:18,  2.38it/s]     16%|#6        | 8/50 [00:03<00:16,  2.54it/s]     18%|#8        | 9/50 [00:03<00:15,  2.64it/s]     20%|##        | 10/50 [00:04<00:16,  2.48it/s]     22%|##2       | 11/50 [00:04<00:16,  2.34it/s]     24%|##4       | 12/50 [00:05<00:17,  2.17it/s]     26%|##6       | 13/50 [00:05<00:15,  2.40it/s]     28%|##8       | 14/50 [00:06<00:13,  2.58it/s]     30%|###       | 15/50 [00:06<00:13,  2.66it/s]     32%|###2      | 16/50 [00:06<00:12,  2.74it/s]     34%|###4      | 17/50 [00:07<00:11,  2.86it/s]     36%|###6      | 18/50 [00:07<00:10,  3.02it/s]     38%|###8      | 19/50 [00:07<00:10,  2.92it/s]     40%|####      | 20/50 [00:08<00:12,  2.41it/s]     42%|####2     | 21/50 [00:08<00:11,  2.53it/s]     44%|####4     | 22/50 [00:09<00:10,  2.68it/s]     46%|####6     | 23/50 [00:09<00:09,  2.72it/s]     48%|####8     | 24/50 [00:09<00:09,  2.75it/s]     50%|#####     | 25/50 [00:10<00:10,  2.46it/s]     52%|#####2    | 26/50 [00:10<00:10,  2.20it/s]     54%|#####4    | 27/50 [00:11<00:10,  2.22it/s]     56%|#####6    | 28/50 [00:11<00:10,  2.03it/s]     58%|#####8    | 29/50 [00:12<00:09,  2.24it/s]     60%|######    | 30/50 [00:12<00:08,  2.27it/s]     62%|######2   | 31/50 [00:12<00:07,  2.55it/s]     64%|######4   | 32/50 [00:13<00:06,  2.77it/s]     66%|######6   | 33/50 [00:13<00:06,  2.43it/s]     68%|######8   | 34/50 [00:14<00:06,  2.51it/s]     70%|#######   | 35/50 [00:14<00:05,  2.74it/s]     72%|#######2  | 36/50 [00:14<00:05,  2.60it/s]     74%|#######4  | 37/50 [00:15<00:05,  2.31it/s]     76%|#######6  | 38/50 [00:15<00:05,  2.20it/s]     78%|#######8  | 39/50 [00:16<00:05,  2.02it/s]     80%|########  | 40/50 [00:17<00:05,  1.88it/s]     82%|########2 | 41/50 [00:17<00:04,  1.83it/s]     84%|########4 | 42/50 [00:18<00:04,  1.80it/s]     86%|########6 | 43/50 [00:18<00:03,  1.90it/s]     88%|########8 | 44/50 [00:18<00:02,  2.11it/s]     90%|######### | 45/50 [00:19<00:02,  2.37it/s]     92%|#########2| 46/50 [00:19<00:01,  2.25it/s]     94%|#########3| 47/50 [00:20<00:01,  2.32it/s]     96%|#########6| 48/50 [00:20<00:00,  2.20it/s]     98%|#########8| 49/50 [00:21<00:00,  2.36it/s]    100%|##########| 50/50 [00:21<00:00,  2.59it/s]    100%|##########| 50/50 [00:21<00:00,  2.34it/s]
    4.0 modes are significant at alpha=0.05




.. GENERATED FROM PYTHON SOURCE LINES 55-58

The bootstrapping procedure identifies 3 significant modes. We can also
compute the 95 % confidence intervals of the EOFs/PCs and mask out
insignificant elements of the obtained EOFs.

.. GENERATED FROM PYTHON SOURCE LINES 58-65

.. code-block:: default


    ci_components = bs.components().quantile([0.025, 0.975], 'n')
    ci_scores = bs.scores().quantile([0.025, 0.975], 'n')

    is_sig_comps = (np.sign(ci_components).prod('quantile') > 0)









.. GENERATED FROM PYTHON SOURCE LINES 66-67

Summarize the results in a figure.

.. GENERATED FROM PYTHON SOURCE LINES 67-94

.. code-block:: default



    lons, lats = np.meshgrid(is_sig_comps.lon.values, is_sig_comps.lat.values)
    proj = Orthographic(central_latitude=30, central_longitude=-80)
    kwargs = {
        'cmap' : 'RdBu', 'vmin' : -.05, 'vmax': .05, 'transform': PlateCarree()
    }

    fig = plt.figure(figsize=(10, 16))
    gs = GridSpec(5, 2)
    ax1 = [fig.add_subplot(gs[i, 0], projection=proj) for i in range(5)]
    ax2 = [fig.add_subplot(gs[i, 1]) for i in range(5)]

    for i, (a1, a2) in enumerate(zip(ax1, ax2)):
        a1.coastlines(color='.5')
        components.isel(mode=i).plot(ax=a1, **kwargs)
        a1.scatter(
            lons, lats, is_sig_comps.isel(mode=i).values * .5,
            color='k', alpha=.5, transform=PlateCarree()
        )
        ci_scores.isel(mode=i, quantile=0).plot(ax=a2, color='.3', lw='.5', label='2.5%')
        ci_scores.isel(mode=i, quantile=1).plot(ax=a2, color='.3', lw='.5', label='97.5%')
        scores.isel(mode=i).plot(ax=a2, lw='.5', alpha=.5, label='PC')
        a2.legend(loc=2)

    plt.tight_layout()
    plt.savefig('bootstrap.jpg')



.. image-sg:: /auto_examples/3validation/images/sphx_glr_plot_bootstrap_001.png
   :alt: mode = 1, mode = 2, mode = 3, mode = 4, mode = 5, mode = 1, mode = 2, mode = 3, mode = 4, mode = 5
   :srcset: /auto_examples/3validation/images/sphx_glr_plot_bootstrap_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  25.479 seconds)


.. _sphx_glr_download_auto_examples_3validation_plot_bootstrap.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bootstrap.py <plot_bootstrap.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bootstrap.ipynb <plot_bootstrap.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
